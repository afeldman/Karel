-- karel programming language based on pascal
--
-- a karel program example:
--
{-
        PROGRAM foo
        CONST
                a = 1
                b = 2
        TYPE
                test FROM bare
                STRUCTURE xyz_structure
                          test : INTEGER
                ENDSTRUCTURE
                test2 : xyz_structure
        VAR
                var1: test2
                var2: test
                var3: INTEGER
                var4, var5: CHAR
        ROUTINE do_something (k: BYTE; a: INTEGER; b: String)
        BEGIN
        END foo

        ROUTINE do_something
        VAR
                a: INTEGER
        CONST
        TYPE
        BEGIN
                IF (a=0; a < 1000; ++a) THEN
                   print("a") FROM bare
                ENDIF
        END do_something

-}

-- comments in karel are c style or haskell style.
-- I added a multiline haskell related command for karel
comment "--";
-- haskell multiline comment
comment "-{" "-}";

-- each karel programm starts with a programm identifier
KarelGrammer. Karel ::= "program" Ident LineEnd ProgramBody;

ProgramBody. ProgramBody ::= "begin" [Stm] "end" Ident LineEnd;
-- statementlist
separator Stm ";";

Labeled_Statement. Stm ::= Ident "::" Stm ; -- for the jump statement
JumpStatementGOTO. Stm ::= "goto" Ident;        -- jump to statement
JumpStatementGOTOSplit. Stm ::= "go" "to" Ident; -- maybe you like to seperte goto
-- ExprStatement. Stm ::= Exporession_stm;

-- a lineend is a \n or ;
rules LineEnd ::= ";" | "\n";

ConstIdent. Constant ::= Real;
ConstChar. Constant ::= Character;
ConstHex. Constant ::= Hex;
ConstOctal. Constant ::= Octal;
ConstInteger. Constant ::= Integer;

token Character '\'' ((char - ["'\\"]) | ('\\' ["'\\ntr"])) '\'';

token UnsignedInteger ["123456789"] digit*;

-- real number
token Real (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               )|((digit+ ('e'|'E')('-')? digit+));

-- hex number
token Hex '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

-- octal number
token Octal '0'["01234567"]*;
